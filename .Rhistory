load("/home/leandro/Desenvolvimento/workspace/RFundamentos/Parte1/RFundamentos.RData")
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:10, nrow = 2)
matriz1
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:10, nrow = 2)
matriz1 <- matrix(1:10, nrow = 2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
View(matriz1)
array1 <- array(1:5, dim=c(3,3,3))
array1
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
# Data Fames: dados de diferentes tipos
# Maneira mais facil de explicar data frames: e uma matriz com
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
# Data Fames: dados de diferentes tipos
# Maneira mais facil de explicar data frames: e uma matriz com diferentes tipos de dados
View(iris)
View(array1)
View(vetor1)
View(matriz1)
lista1 <- list(a=matriz1, b=vetor1)
lista1
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
View(lista1)
# Funções também são vistos como objetos em R
func1 <- function(x){
var <- x*x
return(var)
}
func1(5)
class(func1)
# Removendo objetos
objects()
rm(array1, func1)
objects()
# Número de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
# Número de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
matrix(c(1,2,3,4,5,6), nr = 3)
matrix(c(1,2,3,4,5,6), nr = 6)
# Número de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
matrix(c(1,2,3,4,5,6), nr = 3)
matrix(c(1,2,3,4,5,6), nr = 6)
# Numero de colunas
matrix(c(1,2,3,4,5,6), nr = 6)
# Numero de colunas
matrix(c(1,2,3,4,5,6), nc = 6)
# Help
?matrix
# Matrizes precisam ter um numero par de valores
matrix(c(1,2,3,4,5), nc =2)
# Criando matrizes a partir de vetores e preenchimento a partir
meus_dados= c(1:10)
matrix(data = meus_dados, nrow=5, ncol=2,burow = T)
matrix(data = meus_dados, nrow=5, ncol=2,byrow = T)
# Numero de colunas
matrix(c(1,2,3,4,5,6), nc = 2)
# Criando matrizes a partir de vetores e preenchimento a partir
meus_dados= c(1:10)
matrix(data = meus_dados, nrow=5, ncol=2,byrow = T)
matrix(data = meus_dados, nrow=5, ncol=2)
# Fatiando a Matriz
mat <- matrix(c(2,3,4,5), nr = 2)
matrix(c(1,2,3,4,5), nc =2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
matrix(data = meus_dados, nrow=5, ncol=2,byrow = T)
matrix(data = meus_dados, nrow=5, ncol=2)
# Criando uma matrix diagonal
matriz = 1:3
diag(matriz)
diag vetor
# Extraindo valor de uma matriz diagonal
vetor = diag(matriz)
diag(vetor)
# transposta da matriz
w <- matrix(c(2,4,8,12), nr=2, ncol=2)
w
t(w)
u <- t(w)
u
# transposta da matriz
W <- matrix(c(2,4,8,12), nr=2, ncol=2)
w
W
t(W)
U <- t(w)
u
objects()
rm(u,w)
U <- t(w)
U <- t(W)
u
U
# Obtendo uma matriz inversa
solve(W)
# Multiplição de matrizes
mat1 <- matrix(c(2,3,4,5), nr=2)
mat1
mat2 <- matrix(c(6,7,8,9), nr=2)
mat2
mat1*mat2
mat/mat2
mat1/mat2
mat1+mat2
rem(mat)
rm(mat)
mat1+mat2
mat2-mat2
mat1-mat2
# Multiplicando matrix com vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr=2)
x*y
#Nomeando a matriz
mat3 <- matrix(c('Futebol', 'Natação', 'Campo', 'Piscina'), nr=2)
mat3
dimnames(mat3) = (list(c("linha1", "linha2"), c("Coluna1", "colunma2")))
mat3
# Identificando linhas e colunas no momento de crtiação da Matriz
matrix(c(1,2,3,4), nr=2, nc=2, dimnames= list(c("Linha1","Linha2"), c("Coluna1", "Coluna2"))
# Identificando linhas e colunas no momento de crtiação da Matriz
matrix(c(1,2,3,4), nr=2, nc=2, dimnames= list(c("Linha1","Linha2"), c("Coluna1", "Coluna2")))
# Identificando linhas e colunas no momento de crtiação da Matriz
matrix(c(1,2,3,4), nr=2, nc=2, dimnames= list(c("Linha1","Linha2"), c("Coluna1", "Coluna2")))
# combinando matrizes
mat4 <- matrix(c(2,3,4,5), nr=2)
mat4
mat5
mat5 <- matrix(c(6,7,8,9), nr=2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstruindo a matrix
c(mat4)
#lista de strings
lista_caracter = list('A', 'Bem Vindo', 'DSA')
lista_caracter
# lista numeros inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
# lista e floats
lista_numerico= list(1,90, 45.3, 300.5)
lista_numerico
# lista de numeros complexox
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
lista_logicos
# lista de valores lógicos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
lista_composta = list("A",3,TRUE)
lista_composta
lista1 <- list(1:10, c("Maria", "João", "Alfredo"), rnorm(10))
lista1
# listas Compostas
lista_composta = list("A",3,TRUE)
lista_composta
lista1 <- list(1:10, c("Maria", "João", "Alfredo"), rnorm(10))
lista1
?rnorm
# slicing da lista
lista1[1]
lista1[c(1,2)]
# slicing da lista
lista1[1]
lista1[c(1,2)]
lista1[2]
lista1[[2]][1]
lista1
lista1 [[2]][1] = "Mônica"
lista1
# Para nomear os elementos - Listas Nomeadas
names(lista1) <- c("inteiros", "caracteres", "numéricos")
lista1
vec_num <- 1:4
vec_char <- c("A","B","C","D ")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
#Nomear os elementos diretamente
lista2 <- list(elemento1=3:5, elemento=c(7.2,3.5))
lista2
#Trabalhando com elementos especificos da lista
names(lista1) <- c("inteiros", "caracteres", "numéricos")
lista1
lista1$caracteres
length(lista1$inteiros)
lista1$inteiros
# Podemos extrair um elemento especifico dentro de cada nivel d
lista1$caracteres[2]
#Mode dos elementos
mode(lista1$numéricos)
mode(lista1$caracteres)
#Combinando 2 listas
lista3 <- c(lista1, lista2)
lista3
#Transformando um vetor em lista
v = c(1:3)
v
l = aslist(v)
l = as.list(v)
l
# Unindo 2 elementos em uma lista
mat = matrix(1:4, nrow = 2)
mat
vec=c(1:9)
vec
lst = list(mat, vec)
lst
